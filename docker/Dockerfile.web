# Base stage with common dependencies
FROM node:22-alpine AS base

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    tini \
    wget \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./
COPY packages/web/package.json ./packages/web/
COPY packages/shared/package.json ./packages/shared/

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

# Development stage
FROM base AS development

# Install all dependencies (including dev)
RUN npm ci

# Copy source code
COPY packages/web ./packages/web
COPY packages/shared ./packages/shared
COPY tsconfig.json ./

# Change ownership to nodejs user
RUN chown -R nodejs:nodejs /app

USER nodejs

EXPOSE 3000

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:3000 || exit 1

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Development command (hot reload)
CMD ["npm", "run", "dev", "--workspace=packages/web"]

# Build stage for production
FROM base AS builder

# Install all dependencies (including dev for building)
RUN npm ci

# Copy source code
COPY packages/web ./packages/web
COPY packages/shared ./packages/shared
COPY tsconfig.json ./

# Build shared types first
RUN npm run build --workspace=packages/shared

# Build web application
RUN npm run build --workspace=packages/web

# Production stage (nginx)
FROM nginx:alpine AS production

# Install system dependencies and tini
RUN apk add --no-cache \
    tini \
    wget \
    && rm -rf /var/cache/apk/*

# Create non-root user for nginx
RUN addgroup -g 1001 -S nginx-custom && \
    adduser -S nginx-custom -u 1001 -G nginx-custom

# Copy built application
COPY --from=builder --chown=nginx-custom:nginx-custom /app/packages/web/dist /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Create nginx pid directory with correct permissions
RUN mkdir -p /var/run/nginx && \
    chown nginx-custom:nginx-custom /var/run/nginx

# Switch to non-root user
USER nginx-custom

EXPOSE 3000

# Health check for production
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:3000 || exit 1

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Production command
CMD ["nginx", "-g", "daemon off;"]
