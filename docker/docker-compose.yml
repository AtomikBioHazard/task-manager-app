version: '3.8'

# Define custom network for better service isolation
networks:
  task-manager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # PostgreSQL database service
  postgres:
    image: postgres:16-alpine
    container_name: task-manager-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-task_manager_dev}
      POSTGRES_USER: ${POSTGRES_USER:-dev_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d:ro
    networks:
      - task-manager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dev_user} -d ${POSTGRES_DB:-task_manager_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
      target: ${DOCKER_TARGET:-development}
    container_name: task-manager-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-3001}:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-dev_user}:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/${POSTGRES_DB:-task_manager_dev}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_key_change_in_production}
      PORT: 3001
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
    volumes:
      # Development hot-reload volumes (only in development)
      - ../packages/api:/app/packages/api:cached
      - ../packages/shared:/app/packages/shared:cached
      - /app/packages/api/node_modules
      - /app/packages/shared/node_modules
      - api_logs:/app/logs
    networks:
      - task-manager-network
    depends_on:
      postgres:
        condition: service_healthy
    command: ${API_COMMAND:-npm run dev --workspace=packages/api}
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend web service
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile.web
      target: ${DOCKER_TARGET:-development}
    container_name: task-manager-web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
    volumes:
      # Development hot-reload volumes (only in development)
      - ../packages/web:/app/packages/web:cached
      - ../packages/shared:/app/packages/shared:cached
      - /app/packages/web/node_modules
      - /app/packages/shared/node_modules
    networks:
      - task-manager-network
    depends_on:
      api:
        condition: service_healthy
    command: ${WEB_COMMAND:-npm run dev --workspace=packages/web}
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  api_logs:
    driver: local
